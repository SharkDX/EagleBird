cmake_minimum_required(VERSION 3.2)

set(CMAKE_GENERATOR "Visual Studio 15 2017")
message("generator is set to ${CMAKE_GENERATOR}")

set(PROJECT_NAME EagleBird)
project(${PROJECT_NAME})

#file(GLOB HEADER_FILES src/*.h)
#file(GLOB SOURCE_FILES src/*.cpp)
file(GLOB_RECURSE PROJECT_SOURCE_FILES "src/*.h" "src/*.cpp")

macro(GroupSources curdir)
	file(GLOB children RELATIVE ${PROJECT_SOURCE_DIR}/${curdir} ${PROJECT_SOURCE_DIR}/${curdir}/*)

	foreach(child ${children})

		if(IS_DIRECTORY ${PROJECT_SOURCE_DIR}/${curdir}/${child})
			GroupSources(${curdir}/${child})
		else()
			string(REPLACE "/" "\\" groupname ${curdir})
			source_group(${groupname} FILES ${PROJECT_SOURCE_DIR}/${curdir}/${child})
		endif()
		
	endforeach()
endmacro()
   
# Execute the macro
GroupSources(src)

# Adding header files too so the VS project generated by CMake will list them as well
add_executable(${PROJECT_NAME} ${PROJECT_SOURCE_FILES})

set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD_REQUIRED ON)
set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 11)

set(LIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/deps/lib)

# Adding preproccesor definition required by SFML when linking to static libs
add_definitions(-DGLEW_STATIC)

include_directories(deps/include)

if(WIN32)
	set(OPENGL32 opengl32.lib)
	set(WINMM winmm.lib)
	set(GLFW3 ${LIB_PATH}/glfw3.lib)
	set(GLEW ${LIB_PATH}/glew32sd.lib)
	set(SOIL ${LIB_PATH}/SOIL.lib)
	set(BOX2D ${LIB_PATH}/Box2D.lib)
	set(LIBNOISE ${LIB_PATH}/libnoise.lib)
	target_link_libraries(${PROJECT_NAME} ${OPENGL32} ${WINMM} ${GLFW3} ${GLEW} ${SOIL} ${BOX2D} ${LIBNOISE})
	# Copy the resources to the main solution folder generated for VS so it will detect them when running from the IDE
	add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/resources ${CMAKE_BINARY_DIR})
elseif(UNIX)
	#TODO
endif()

# Copying the contents of the resource folder to the output directory
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/resources $<TARGET_FILE_DIR:${PROJECT_NAME}>)

if(WIN32)
	# Copy the resources to the main solution folder generated for VS so it will detect them when running from the IDE
	add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/resources ${CMAKE_BINARY_DIR}/resources)
endif()

# Copying DLLs/SOs
add_custom_command(TARGET EagleBird POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${CMAKE_CURRENT_SOURCE_DIR}/deps/lib/libnoise.dll" $<TARGET_FILE_DIR:EagleBird>)